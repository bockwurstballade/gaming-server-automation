- name: Ensure Potentially pre-existing service is stopped
  ansible.builtin.include_role:
    name: roles/utils/os/systemd/service/stopped
  vars:
    utils_os_systemd_service_stopped__service_name: "{{ games_cod1_server_installed__service_name }}"

- name: Ensure required software is installed
  ansible.builtin.include_role:
    name: roles/utils/os/software/installed
  vars:
    utils_os_software_installed__name: "{{ item }}"
  loop: "{{ games_cod1_server_installed__software }}"

- name: Ensure Existence of Service User
  ansible.builtin.include_role:
    name: roles/utils/os/users/service/created
  vars:
    - utils_os_users_service_created__group: "{{ games_cod1_server_installed__group_name }}"
    - utils_os_users_service_created__user: "{{ games_cod1_server_installed__user_name }}"

- name: Ensure required libraries are installed
  ansible.builtin.include_role:
    name: roles/utils/os/packages/installed
  vars:
    utils_os_packages_installed__packages: "{{ games_cod1_server_installed__libraries }}"

- name: Ensure permissions on target directories
  ansible.builtin.include_role:
    name: roles/utils/os/users/service/directory/permissions/granted
  vars:
    utils_os_users_service_directory_permissions_granted__user: "{{ games_cod1_server_installed__user_name }}"
    utils_os_users_service_directory_permissions_granted__group: "{{ games_cod1_server_installed__group_name }}"
    utils_os_users_service_directory_permissions_granted__directories: "{{ games_cod1_server_installed__service_directories }}"

- name: Ensure Environment Variables are properly set
  ansible.builtin.include_role:
    name: roles/utils/os/users/service/environment/variables/persisted
  vars:
    - utils_os_users_service_environment_variables_persisted__user: "{{ games_cod1_server_installed__user_name }}"
    - utils_os_users_service_environment_variables_persisted__group: "{{ games_cod1_server_installed__group_name }}"
    - utils_os_users_service_environment_variables_persisted__service_dir: "{{ games_cod1_server_installed__directory }}"

- name: Ensure expected archives are extracted
  ansible.builtin.include_role:
    name: roles/utils/os/file/archive/download_and_extract
  vars:
    utils_os_file_archive_download_and_extract__user: "{{ games_cod1_server_installed__user_name }}"
    utils_os_file_archive_download_and_extract__group: "{{ games_cod1_server_installed__group_name }}"
    utils_os_file_archive_download_and_extract__src: "{{ item.src }}"
    utils_os_file_archive_download_and_extract__file_name: "{{ item.file_name }}"
    utils_os_file_archive_download_and_extract__dest: "{{ item.dest }}"
  loop: "{{ games_cod1_server_installed__archives }}"

- name: Enforce main cfg Templates
  ansible.builtin.include_role:
    name: roles/utils/os/file/template/enforced
  vars:
    utils_os_file_template_enforced__directory: "{{ item.directory }}"
    utils_os_file_template_enforced__file_name: "{{ item.file_name }}"
    utils_os_file_template_enforced__user: "{{ games_cod1_server_installed__user_name }}"
    utils_os_file_template_enforced__group: "{{ games_cod1_server_installed__group_name }}"
  loop: "{{ games_cod1_server_installed__templates }}"

- name: Enforce individual Instance cfg Templates
  become: true
  become_user: root
  ansible.builtin.template:
    src: templates/games/cod1/main/server_instance.cfg.j2
    dest: "{{ (games_cod1_server_installed__server_main, item.cfg + '.cfg') | ansible.builtin.path_join }}"
    owner: "{{ games_cod1_server_installed__user_name }}"
    group: "{{ games_cod1_server_installed__group_name }}"
    mode: '0644'
    backup: yes
  loop: "{{ games_cod1_server_installed__instances }}"

- name: Create systemd service file for CoD1 instances
  become: true
  become_user: root
  ansible.builtin.copy:
    dest: /etc/systemd/system/cod1_{{ item.cfg }}.service
    content: |
      [Unit]
      Description=Call of Duty 1 Dedicated Server
      After=network.target

      [Service]
      User={{ games_cod1_server_installed__user_name }}
      Group={{ games_cod1_server_installed__group_name }}
      WorkingDirectory={{ games_cod1_server_installed__directory }}
      Environment="LD_LIBRARY_PATH=/lib:{{ games_cod1_server_installed__directory }}"
      ExecStart={{ games_cod1_server_installed__execstart + ' +set dedicated ' + item.dedicated | string + ' +set net_port ' + item.port | string + ' +exec ' + ((games_cod1_server_installed__directory, item.cfg + '.cfg') | ansible.builtin.path_join)  }}
      Restart=on-failure
      Type=simple
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    owner: root
    group: root
    mode: '0644'
  loop: "{{ games_cod1_server_installed__instances }}"

    # - name: "Create systemd service file for {{ games_cod1_server_installed__service_name }}"
    #   ansible.builtin.copy:
    #     dest: /etc/systemd/system/{{ games_cod1_server_installed__service_name }}.service
    #     content: |
    #       [Unit]
    #       Description={{ games_cod1_server_installed__service_description }}
    #       After=network.target

    #       [Service]
    #       User={{ games_cod1_server_installed__user_name }}
    #       Group={{ games_cod1_server_installed__group_name }}
    #       WorkingDirectory={{ games_cod1_server_installed__directory }}
    #       Environment="LD_LIBRARY_PATH=/lib:{{ games_cod1_server_installed__directory }}"
    #       ExecStart={{ games_cod1_server_installed__directory }}/cod_lnxded +set dedicated 2 +set net_port {{ games_cod1_server_installed__port }} +set fs_basepath {{ games_cod1_server_installed__directory }} +exec {{ games_cod1_server_installed__server_cfg }} +set ttycon 0
    #       Restart=on-failure
    #       Type=simple
    #       KillMode=process

    #       [Install]
    #       WantedBy=multi-user.target
    #     owner: root
    #     group: root
    #     mode: '0644'

- name: Disable CD Key Check if disabled
  ansible.builtin.include_role:
    name: roles/games/cod1/server/serial_check_disabled
  vars:
    games_cod1_server_serial_check_disabled__cd_check: "{{ item.cd_check }}"
    games_cod1_server_serial_check_disabled__port: "{{ item.port }}"
  loop: "{{ games_cod1_server_installed__instances }}"